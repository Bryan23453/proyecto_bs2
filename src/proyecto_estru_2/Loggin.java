/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto_estru_2;

import java.awt.Label;
import java.sql.*;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.swing.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bryan
 */
public class Loggin extends javax.swing.JFrame {

    /**
     * Creates new form Loggin
     */
    ArrayList<String> tablasAgregadas = new ArrayList<>();
    
    ConexionMariaDB conexMariaDB = new ConexionMariaDB();
    ConexionSQLServer conexSQLServer = new ConexionSQLServer();
    //Datos MariaDB
    String hostMariaDB = "127.0.0.1";
    String portMariaDB = "3306";
    String dbNameMariaDB = "prueba";
    String userNameMariaDB = "root";
    String userPassMariaDB = "admin";
    
    //Datos SQLServer
    String hostSQLServer = "localhost";
    String portSQLServer = "1433";
    String dbNameSQLServer = "prueba";
    String userNameSQLServer = "userProyecto";
    String userPassSQLServer = "admin";
    public Loggin() {
        initComponents();
        this.setResizable(false);
        this.setSize(1153,680);
        this.setLocationRelativeTo(null);
        Fondo5.setVisible(true);
        jPanel5.setVisible(false);
        Menu.setVisible(false);
        Fondo4.setVisible(true);
        Cambio_Ecena_Menu cmm = new Cambio_Ecena_Menu(Fondo4,Fondo5 ,Menu);
        cmm.start();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Menu = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel72 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        Icono_Conectado = new javax.swing.JLabel();
        Icono_replica = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Panel_Conexiones = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        Nom_Puerto1 = new javax.swing.JTextField();
        Boton_Probar_Coneccion1 = new javax.swing.JButton();
        Nom_Insta_1 = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        Nom_BaseDato_1 = new javax.swing.JTextField();
        Nom_Usu1 = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        Nom_Pass_1 = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        Nom_Insta_2 = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        Nom_BaseDato_2 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        Nom_Puerto2 = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        Nom_Usu2 = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        Nom_Pass_2 = new javax.swing.JTextField();
        Boton_Guardar_db = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Boton_Probar_Coneccion2 = new javax.swing.JButton();
        Panel_Replica = new javax.swing.JPanel();
        Boton_Guardar_Replicas = new javax.swing.JButton();
        Boton_Cancelar_Replicas = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        Flecha_Izquierda = new javax.swing.JLabel();
        Flecha_Derecha = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Lista_Tablas_Origen = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        Lista_Tablas_Replica = new javax.swing.JList<>();
        btn_Job = new javax.swing.JButton();
        lbl_FechaEjecutada = new javax.swing.JLabel();
        lbl_horaEjecucion = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        Fondo5 = new javax.swing.JLabel();
        Fondo4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        Menu.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102,150));
        jPanel2.setLayout(null);

        jLabel72.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel72.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/cerrar-sesion (1).png"))); // NOI18N
        jLabel72.setText("Salir");
        jLabel72.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel72MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel72);
        jLabel72.setBounds(970, 20, 70, 40);

        Menu.add(jPanel2);
        jPanel2.setBounds(90, 580, 1060, 70);

        jPanel4.setBackground(new java.awt.Color(102, 102, 102,150));
        jPanel4.setLayout(null);

        Icono_Conectado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/conectado_estatico.png"))); // NOI18N
        Icono_Conectado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Icono_ConectadoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Icono_ConectadoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Icono_ConectadoMouseExited(evt);
            }
        });
        jPanel4.add(Icono_Conectado);
        Icono_Conectado.setBounds(10, 10, 80, 80);

        Icono_replica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/entrega-de-correo_estatica.png"))); // NOI18N
        Icono_replica.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Icono_replicaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Icono_replicaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Icono_replicaMouseExited(evt);
            }
        });
        jPanel4.add(Icono_replica);
        Icono_replica.setBounds(10, 110, 80, 80);

        Menu.add(jPanel4);
        jPanel4.setBounds(0, 0, 90, 650);

        jPanel5.setLayout(null);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/trabajo-en-progreso.png"))); // NOI18N
        jPanel5.add(jLabel2);
        jLabel2.setBounds(180, 90, 256, 256);

        Menu.add(jPanel5);
        jPanel5.setBounds(300, 120, 600, 420);

        Panel_Conexiones.setBackground(new java.awt.Color(0, 0, 0,150));
        Panel_Conexiones.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Conexiones.setPreferredSize(new java.awt.Dimension(1070, 610));
        Panel_Conexiones.setLayout(null);

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(137, 250, 230));
        jLabel23.setText("Nombre Instancia");
        Panel_Conexiones.add(jLabel23);
        jLabel23.setBounds(130, 100, 160, 30);

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(137, 250, 230));
        jLabel24.setText("Puerto");
        Panel_Conexiones.add(jLabel24);
        jLabel24.setBounds(130, 240, 130, 30);

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(137, 250, 230));
        jLabel25.setText("Base De Datos Destino");
        Panel_Conexiones.add(jLabel25);
        jLabel25.setBounds(710, 20, 260, 30);

        Nom_Puerto1.setBackground(new java.awt.Color(102, 102, 102));
        Nom_Puerto1.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Conexiones.add(Nom_Puerto1);
        Nom_Puerto1.setBounds(130, 270, 210, 30);

        Boton_Probar_Coneccion1.setBackground(new java.awt.Color(204, 204, 204));
        Boton_Probar_Coneccion1.setForeground(new java.awt.Color(0, 0, 0));
        Boton_Probar_Coneccion1.setText("Probar");
        Boton_Probar_Coneccion1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Boton_Probar_Coneccion1MouseClicked(evt);
            }
        });
        Panel_Conexiones.add(Boton_Probar_Coneccion1);
        Boton_Probar_Coneccion1.setBounds(160, 470, 110, 40);

        Nom_Insta_1.setBackground(new java.awt.Color(102, 102, 102));
        Nom_Insta_1.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Conexiones.add(Nom_Insta_1);
        Nom_Insta_1.setBounds(130, 130, 210, 30);

        jLabel41.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(137, 250, 230));
        jLabel41.setText("Nombre Base Datos");
        Panel_Conexiones.add(jLabel41);
        jLabel41.setBounds(130, 170, 180, 30);

        Nom_BaseDato_1.setBackground(new java.awt.Color(102, 102, 102));
        Nom_BaseDato_1.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Conexiones.add(Nom_BaseDato_1);
        Nom_BaseDato_1.setBounds(130, 200, 210, 30);

        Nom_Usu1.setBackground(new java.awt.Color(102, 102, 102));
        Nom_Usu1.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Conexiones.add(Nom_Usu1);
        Nom_Usu1.setBounds(130, 340, 210, 30);

        jLabel42.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(137, 250, 230));
        jLabel42.setText("Nombre Usuario");
        Panel_Conexiones.add(jLabel42);
        jLabel42.setBounds(130, 310, 150, 30);

        Nom_Pass_1.setBackground(new java.awt.Color(102, 102, 102));
        Nom_Pass_1.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Conexiones.add(Nom_Pass_1);
        Nom_Pass_1.setBounds(130, 410, 210, 30);

        jLabel52.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(137, 250, 230));
        jLabel52.setText("Password");
        Panel_Conexiones.add(jLabel52);
        jLabel52.setBounds(130, 380, 130, 30);

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(137, 250, 230));
        jLabel29.setText("Nombre Instancia");
        Panel_Conexiones.add(jLabel29);
        jLabel29.setBounds(730, 100, 160, 30);

        Nom_Insta_2.setBackground(new java.awt.Color(102, 102, 102));
        Nom_Insta_2.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Conexiones.add(Nom_Insta_2);
        Nom_Insta_2.setBounds(730, 130, 210, 30);

        jLabel43.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(137, 250, 230));
        jLabel43.setText("Nombre Base Datos");
        Panel_Conexiones.add(jLabel43);
        jLabel43.setBounds(730, 170, 180, 30);

        Nom_BaseDato_2.setBackground(new java.awt.Color(102, 102, 102));
        Nom_BaseDato_2.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Conexiones.add(Nom_BaseDato_2);
        Nom_BaseDato_2.setBounds(730, 200, 210, 30);

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(137, 250, 230));
        jLabel30.setText("Puerto");
        Panel_Conexiones.add(jLabel30);
        jLabel30.setBounds(730, 240, 130, 30);

        Nom_Puerto2.setBackground(new java.awt.Color(102, 102, 102));
        Nom_Puerto2.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Conexiones.add(Nom_Puerto2);
        Nom_Puerto2.setBounds(730, 270, 210, 30);

        jLabel47.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(137, 250, 230));
        jLabel47.setText("Nombre Usuario");
        Panel_Conexiones.add(jLabel47);
        jLabel47.setBounds(730, 310, 150, 30);

        Nom_Usu2.setBackground(new java.awt.Color(102, 102, 102));
        Nom_Usu2.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Conexiones.add(Nom_Usu2);
        Nom_Usu2.setBounds(730, 340, 210, 30);

        jLabel56.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel56.setForeground(new java.awt.Color(137, 250, 230));
        jLabel56.setText("Password");
        Panel_Conexiones.add(jLabel56);
        jLabel56.setBounds(730, 380, 130, 30);

        Nom_Pass_2.setBackground(new java.awt.Color(102, 102, 102));
        Nom_Pass_2.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Conexiones.add(Nom_Pass_2);
        Nom_Pass_2.setBounds(730, 410, 210, 30);

        Boton_Guardar_db.setBackground(new java.awt.Color(204, 204, 204));
        Boton_Guardar_db.setForeground(new java.awt.Color(0, 0, 0));
        Boton_Guardar_db.setText("Guardar");
        Boton_Guardar_db.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Boton_Guardar_dbMouseClicked(evt);
            }
        });
        Panel_Conexiones.add(Boton_Guardar_db);
        Boton_Guardar_db.setBounds(460, 490, 150, 60);

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(137, 250, 230));
        jLabel31.setText("Base De Datos Origen");
        Panel_Conexiones.add(jLabel31);
        jLabel31.setBounds(100, 20, 260, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/mensaje.gif"))); // NOI18N
        jPanel1.add(jLabel1);

        Panel_Conexiones.add(jPanel1);
        jPanel1.setBounds(420, 160, 230, 240);

        Boton_Probar_Coneccion2.setBackground(new java.awt.Color(204, 204, 204));
        Boton_Probar_Coneccion2.setForeground(new java.awt.Color(0, 0, 0));
        Boton_Probar_Coneccion2.setText("Probar");
        Boton_Probar_Coneccion2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Boton_Probar_Coneccion2MouseClicked(evt);
            }
        });
        Panel_Conexiones.add(Boton_Probar_Coneccion2);
        Boton_Probar_Coneccion2.setBounds(760, 470, 110, 40);

        Menu.add(Panel_Conexiones);
        Panel_Conexiones.setBounds(1230, 0, 1080, 580);

        Panel_Replica.setBackground(new java.awt.Color(0, 0, 0,150));
        Panel_Replica.setForeground(new java.awt.Color(255, 255, 255));
        Panel_Replica.setPreferredSize(new java.awt.Dimension(1070, 610));
        Panel_Replica.setLayout(null);

        Boton_Guardar_Replicas.setBackground(new java.awt.Color(204, 204, 204));
        Boton_Guardar_Replicas.setForeground(new java.awt.Color(0, 0, 0));
        Boton_Guardar_Replicas.setText("Guardar");
        Boton_Guardar_Replicas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Boton_Guardar_ReplicasMouseClicked(evt);
            }
        });
        Panel_Replica.add(Boton_Guardar_Replicas);
        Boton_Guardar_Replicas.setBounds(370, 460, 110, 40);

        Boton_Cancelar_Replicas.setBackground(new java.awt.Color(204, 204, 204));
        Boton_Cancelar_Replicas.setForeground(new java.awt.Color(0, 0, 0));
        Boton_Cancelar_Replicas.setText("Cancelar");
        Boton_Cancelar_Replicas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Boton_Cancelar_ReplicasMouseClicked(evt);
            }
        });
        Panel_Replica.add(Boton_Cancelar_Replicas);
        Boton_Cancelar_Replicas.setBounds(530, 460, 110, 40);

        jLabel32.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(137, 250, 230));
        jLabel32.setText("Replicando");
        Panel_Replica.add(jLabel32);
        jLabel32.setBounds(770, 20, 150, 30);

        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(137, 250, 230));
        jLabel33.setText("Sin Replicar");
        Panel_Replica.add(jLabel33);
        jLabel33.setBounds(90, 20, 150, 30);

        Flecha_Izquierda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/Flecha estatica.png"))); // NOI18N
        Flecha_Izquierda.setText("jLabel6");
        Flecha_Izquierda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Flecha_IzquierdaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Flecha_IzquierdaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Flecha_IzquierdaMouseExited(evt);
            }
        });
        Panel_Replica.add(Flecha_Izquierda);
        Flecha_Izquierda.setBounds(440, 310, 110, 110);

        Flecha_Derecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/flecah1 estatico.png"))); // NOI18N
        Flecha_Derecha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Flecha_DerechaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Flecha_DerechaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Flecha_DerechaMouseExited(evt);
            }
        });
        Panel_Replica.add(Flecha_Derecha);
        Flecha_Derecha.setBounds(440, 150, 110, 110);

        jScrollPane1.setViewportView(Lista_Tablas_Origen);

        Panel_Replica.add(jScrollPane1);
        jScrollPane1.setBounds(10, 80, 300, 450);

        jScrollPane2.setViewportView(Lista_Tablas_Replica);

        Panel_Replica.add(jScrollPane2);
        jScrollPane2.setBounds(720, 80, 280, 450);

        btn_Job.setBackground(new java.awt.Color(204, 204, 204));
        btn_Job.setForeground(new java.awt.Color(0, 0, 0));
        btn_Job.setText("Ejecutar Job");
        btn_Job.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_JobMouseClicked(evt);
            }
        });
        Panel_Replica.add(btn_Job);
        btn_Job.setBounds(450, 530, 130, 40);

        lbl_FechaEjecutada.setBackground(new java.awt.Color(204, 204, 204));
        lbl_FechaEjecutada.setForeground(new java.awt.Color(0, 0, 0));
        lbl_FechaEjecutada.setText("Ultima Fecha Job");
        Panel_Replica.add(lbl_FechaEjecutada);
        lbl_FechaEjecutada.setBounds(320, 10, 400, 20);

        lbl_horaEjecucion.setBackground(new java.awt.Color(204, 204, 204));
        lbl_horaEjecucion.setForeground(new java.awt.Color(0, 0, 0));
        lbl_horaEjecucion.setText("Ultima Hora Job");
        lbl_horaEjecucion.setToolTipText("");
        Panel_Replica.add(lbl_horaEjecucion);
        lbl_horaEjecucion.setBounds(320, 40, 400, 20);

        Menu.add(Panel_Replica);
        Panel_Replica.setBounds(1230, 0, 1060, 580);

        jPanel3.setBackground(new java.awt.Color(225, 225, 225,151));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(null);
        Menu.add(jPanel3);
        jPanel3.setBounds(90, 0, 1060, 580);

        Fondo5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/frame menu.png"))); // NOI18N
        Menu.add(Fondo5);
        Fondo5.setBounds(0, 0, 1152, 650);

        getContentPane().add(Menu);
        Menu.setBounds(0, 0, 2370, 650);

        Fondo4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/continuacion-animacion_1.gif"))); // NOI18N
        getContentPane().add(Fondo4);
        Fondo4.setBounds(-3, -4, 1160, 650);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Boton_Probar_Coneccion1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Boton_Probar_Coneccion1MouseClicked
        conexMariaDB.setHost(Nom_Insta_1.getText());
        conexMariaDB.setdbName(Nom_BaseDato_1.getText());
        conexMariaDB.setPort(Nom_Puerto1.getText());
        conexMariaDB.setUser(Nom_Usu1.getText());
        conexMariaDB.setPass(Nom_Pass_1.getText());
        //este metodo hace que se vea la imagen de work
        jPanel5.setVisible(true);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                conexMariaDB.conectarMariaDB();
                if(conexMariaDB.getConectado() == true){
                    JOptionPane.showMessageDialog(null, "Conectado Exitosamente a MariaDB");
                }
                else{
                    JOptionPane.showMessageDialog(null, "Conexion Fallida a MariaDB");
                }
                //aqui pones las lineas de la db para que aparezca la imagen 
                jPanel5.setVisible(false);
            }
        });
        //aaqui termina
    }//GEN-LAST:event_Boton_Probar_Coneccion1MouseClicked

    private void Boton_Guardar_ReplicasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Boton_Guardar_ReplicasMouseClicked
        //este metodo hace que se vea la imagen de work
        jPanel5.setVisible(true);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                //aqui pones las lineas de la db para que aparezca la imagen 
                if(!tablasAgregadas.isEmpty()){
                    String nombreArchivo = "C:\\Users\\diego\\Documents\\queries.sql";
                    ArrayList<String> queriesSQL = new ArrayList<String>();
                    String useTable = "use " + dbNameSQLServer + ";"; 
                    queriesSQL.add(useTable);
                    obtenerQueries(queriesSQL);
                    try (BufferedWriter cleanWriter = new BufferedWriter(new FileWriter(nombreArchivo, false))) {
                        cleanWriter.write(""); // Escribir un string vacío para limpiar el archivo
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    // Escribir sentencias en el archivo
                    try (BufferedWriter writer = new BufferedWriter(new FileWriter(nombreArchivo, true))) {
                        for (String query : queriesSQL) {
                            writer.write(query);
                            writer.newLine(); // Agregar una nueva línea después de cada sentencia
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Debe de escoger tablas a ser replicadas");
                }
                jPanel5.setVisible(false);
            }
        });
        //aaqui termina

    }//GEN-LAST:event_Boton_Guardar_ReplicasMouseClicked

    private void Boton_Guardar_dbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Boton_Guardar_dbMouseClicked
        //este metodo hace que se vea la imagen de work
        conexMariaDB.setHost(Nom_Insta_1.getText());
        conexMariaDB.setdbName(Nom_BaseDato_1.getText());
        conexMariaDB.setPort(Nom_Puerto1.getText());
        conexMariaDB.setUser(Nom_Usu1.getText());
        conexMariaDB.setPass(Nom_Pass_1.getText());

        conexSQLServer.setHost(Nom_Insta_2.getText());
        conexSQLServer.setdbName(Nom_BaseDato_2.getText());
        conexSQLServer.setPort(Nom_Puerto2.getText());
        conexSQLServer.setUser(Nom_Usu2.getText());
        conexSQLServer.setPass(Nom_Pass_2.getText());
        
        hostMariaDB = Nom_Insta_1.getText();
        dbNameMariaDB = Nom_BaseDato_1.getText();
        portMariaDB = Nom_Puerto1.getText();
        userNameMariaDB = Nom_Usu1.getText();
        userPassMariaDB = Nom_Pass_1.getText();
        
        hostSQLServer = Nom_Insta_2.getText();
        dbNameSQLServer = Nom_BaseDato_2.getText();
        portSQLServer = Nom_Puerto2.getText();
        userNameSQLServer = Nom_Usu2.getText();
        userPassSQLServer = Nom_Pass_2.getText();
        
                
        jPanel5.setVisible(true);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                //aqui pones las lineas de la db para que aparezca la imagen 
                
                jPanel5.setVisible(false);
            }
        });
        //aaqui termina
    }//GEN-LAST:event_Boton_Guardar_dbMouseClicked

    private void Boton_Probar_Coneccion2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Boton_Probar_Coneccion2MouseClicked
        conexSQLServer.setHost(Nom_Insta_2.getText());
        conexSQLServer.setdbName(Nom_BaseDato_2.getText());
        conexSQLServer.setPort(Nom_Puerto2.getText());
        conexSQLServer.setUser(Nom_Usu2.getText());
        conexSQLServer.setPass(Nom_Pass_2.getText());        
        //este metodo hace que se vea la imagen de work
        jPanel5.setVisible(true);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                conexSQLServer.conectarSQLServer();
                if(conexSQLServer.getConectado() == true){
                    JOptionPane.showMessageDialog(null, "Conectado Exitosamente a SQLServer");
                }
                else{
                    JOptionPane.showMessageDialog(null, "Conexion Fallida a SQLServer");
                }
                //aqui pones las lineas de la db para que aparezca la imagen 
                jPanel5.setVisible(false);
            }
        });
        //aaqui termina
    }//GEN-LAST:event_Boton_Probar_Coneccion2MouseClicked

    private void Boton_Cancelar_ReplicasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Boton_Cancelar_ReplicasMouseClicked
        //este metodo hace que se vea la imagen de work
        jPanel5.setVisible(true);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                //aqui pones las lineas de la db para que aparezca la imagen 
                DefaultListModel<String> modeloDestino = (DefaultListModel<String>) Lista_Tablas_Replica.getModel();
                System.out.println(tablasAgregadas.size());
                for (int i = 0; i < tablasAgregadas.size(); i++) {
                    String elemento = tablasAgregadas.get(i);
                    System.out.println(elemento);
                    if(modeloDestino.contains(elemento)){
                        modeloDestino.removeElement(elemento);
                    }
                    
                }
                tablasAgregadas.clear();
                jPanel5.setVisible(false);
            }
        });
        //aaqui termina
    }//GEN-LAST:event_Boton_Cancelar_ReplicasMouseClicked

    private void Icono_ConectadoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Icono_ConectadoMouseEntered
        String rutaImagen = "/Media/conectado.gif";
        URL urlImagen = getClass().getResource(rutaImagen);
        ImageIcon icono = new ImageIcon(urlImagen);
        Icono_Conectado.setIcon(icono);
        establecerDatosMariaDB();
        establecerDatosSQLServer();
    }//GEN-LAST:event_Icono_ConectadoMouseEntered

    private void Icono_ConectadoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Icono_ConectadoMouseExited
        String rutaImagen = "/Media/conectado_estatico.png";
        URL urlImagen = getClass().getResource(rutaImagen);
        ImageIcon icono = new ImageIcon(urlImagen);
        Icono_Conectado.setIcon(icono);
    }//GEN-LAST:event_Icono_ConectadoMouseExited

    private void Icono_replicaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Icono_replicaMouseEntered
        String rutaImagen = "/Media/entrega-de-correo.gif";
        URL urlImagen = getClass().getResource(rutaImagen);
        ImageIcon icono = new ImageIcon(urlImagen);
        Icono_replica.setIcon(icono);
    }//GEN-LAST:event_Icono_replicaMouseEntered

    private void Icono_replicaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Icono_replicaMouseExited
        String rutaImagen = "/Media/entrega-de-correo_estatica.png";
        URL urlImagen = getClass().getResource(rutaImagen);
        ImageIcon icono = new ImageIcon(urlImagen);
        Icono_replica.setIcon(icono);
    }//GEN-LAST:event_Icono_replicaMouseExited

    private void Icono_replicaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Icono_replicaMouseClicked
        if(conexMariaDB.getConectado() == true && conexSQLServer.getConectado() == true){
            
            Cambio_Menu CM= new Cambio_Menu(Panel_Replica,Panel_Conexiones);
            CM.start();
            /*try{
                Statement st = conexMariaDB.conexion.createStatement();
                String qt = "CALL CrearTriggerParaTablas();";
                st.executeUpdate(qt);
                st.close();
            }
            catch(SQLException e){
                e.printStackTrace();
            }*/
            listarTablasBDOrigen(Lista_Tablas_Origen);
            listarTablasBDReplica(Lista_Tablas_Replica);
            deshabilitarElementosRepetidos(Lista_Tablas_Origen, Lista_Tablas_Replica);
            obtenerDatosJob();
        }
        else{
            JOptionPane.showMessageDialog(null, "Debe Establecer Conexiones Primero");
        }
    }//GEN-LAST:event_Icono_replicaMouseClicked

    private void Icono_ConectadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Icono_ConectadoMouseClicked
        Cambio_Menu CM= new Cambio_Menu(Panel_Conexiones,Panel_Replica);
        CM.start();
    }//GEN-LAST:event_Icono_ConectadoMouseClicked

    private void Flecha_DerechaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Flecha_DerechaMouseClicked
        //este metodo hace que se vea la imagen de work
        jPanel5.setVisible(true);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                int[] indicesSeleccionados = Lista_Tablas_Origen.getSelectedIndices();

                // Obtén el modelo de la lista de destino
                DefaultListModel<String> modeloDestino = (DefaultListModel<String>) Lista_Tablas_Replica.getModel();

                // Recorre los índices seleccionados y mueve los elementos a la lista de destino
                for (int i = indicesSeleccionados.length - 1; i >= 0; i--) {
                    String elemento = (String) Lista_Tablas_Origen.getModel().getElementAt(indicesSeleccionados[i]);
                    if(modeloDestino.contains(elemento)){
                        JOptionPane.showMessageDialog(null, "Tabla Ya Ha Sido Replicada");
                    }
                    else{
                        modeloDestino.addElement(elemento); // Agrega el elemento a la lista de destino
                        tablasAgregadas.add(elemento);
                    }
                    
                }
                //aqui pones las lineas de la db para que aparezca la imagen 
                jPanel5.setVisible(false);
            }
        });
        //aaqui termina
    }//GEN-LAST:event_Flecha_DerechaMouseClicked

    private void Flecha_DerechaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Flecha_DerechaMouseEntered
        String rutaImagen = "/Media/flechas1.gif";
        URL urlImagen = getClass().getResource(rutaImagen);
        ImageIcon icono = new ImageIcon(urlImagen);
        Flecha_Derecha.setIcon(icono);
    }//GEN-LAST:event_Flecha_DerechaMouseEntered

    private void Flecha_DerechaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Flecha_DerechaMouseExited
        String rutaImagen = "/Media/flecah1 estatico.png";
        URL urlImagen = getClass().getResource(rutaImagen);
        ImageIcon icono = new ImageIcon(urlImagen);
        Flecha_Derecha.setIcon(icono);
    }//GEN-LAST:event_Flecha_DerechaMouseExited

    private void Flecha_IzquierdaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Flecha_IzquierdaMouseClicked
       //este metodo hace que se vea la imagen de work
        jPanel5.setVisible(true);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                //aqui pones las lineas de la db para que aparezca la imagen 
                int[] indicesSeleccionados = Lista_Tablas_Replica.getSelectedIndices();
                
                DefaultListModel<String> modeloDestino = (DefaultListModel<String>) Lista_Tablas_Replica.getModel();
                
                for (int i = indicesSeleccionados.length - 1; i >= 0; i--) {
                    String elemento = (String) Lista_Tablas_Replica.getModel().getElementAt(indicesSeleccionados[i]);
                    if(tablasAgregadas.contains(elemento)){
                        modeloDestino.removeElement(elemento);
                        tablasAgregadas.remove(elemento);
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Tabla ya ha sido replicada. No puede ser movida.");
                    }
                    
                }
                jPanel5.setVisible(false);
            }
        });
        //aaqui termina
    }//GEN-LAST:event_Flecha_IzquierdaMouseClicked

    private void Flecha_IzquierdaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Flecha_IzquierdaMouseEntered
        String rutaImagen = "/Media/flechas-(1).gif";
        URL urlImagen = getClass().getResource(rutaImagen);
        ImageIcon icono = new ImageIcon(urlImagen);
        Flecha_Izquierda.setIcon(icono);
    }//GEN-LAST:event_Flecha_IzquierdaMouseEntered

    private void Flecha_IzquierdaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Flecha_IzquierdaMouseExited
        String rutaImagen = "/Media/Flecha estatica.png";
        URL urlImagen = getClass().getResource(rutaImagen);
        ImageIcon icono = new ImageIcon(urlImagen);
        Flecha_Izquierda.setIcon(icono);
    }//GEN-LAST:event_Flecha_IzquierdaMouseExited

    private void jLabel72MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel72MouseClicked
        if(conexMariaDB.getConectado() == true){
            conexMariaDB.desconectar();
        }
        if(conexSQLServer.getConectado() == true){
            conexSQLServer.desconectar();
        }
        System.exit(0);
        
    }//GEN-LAST:event_jLabel72MouseClicked

    private void btn_JobMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_JobMouseClicked
        // TODO add your handling code here:
        String nombreJob = "JobEscrituraQueries"; // Nombre del job que has creado en SQL Server

        try {
            // Llamada al procedimiento almacenado que ejecuta el job
            String sql = "EXEC msdb.dbo.sp_start_job @job_name = ?";
            try (PreparedStatement stmt = conexSQLServer.conexion.prepareStatement(sql)) {
                stmt.setString(1, nombreJob);
                stmt.executeUpdate();
                System.out.println("Job ejecutado correctamente desde Java.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_JobMouseClicked
    private void establecerDatosMariaDB(){
        //Base de Datos Origen
        Nom_Insta_1.setText(hostMariaDB);
        Nom_BaseDato_1.setText(dbNameMariaDB);
        Nom_Puerto1.setText(portMariaDB);
        Nom_Usu1.setText(userNameMariaDB);
        Nom_Pass_1.setText(userPassMariaDB);
    }
    private void establecerDatosSQLServer(){
        //Base de Datos Origen
        Nom_Insta_2.setText(hostSQLServer);
        Nom_BaseDato_2.setText(dbNameSQLServer);
        Nom_Puerto2.setText(portSQLServer);
        Nom_Usu2.setText(userNameSQLServer);
        Nom_Pass_2.setText(userPassSQLServer);
    }
    private void listarTablasBDOrigen(JList listaOrigen){
        DefaultListModel<String> listModel = new DefaultListModel<>();

        // Consulta para obtener las tablas, excluyendo bitacoraOrigen
        String query = "SELECT TABLE_NAME FROM information_schema.tables WHERE TABLE_SCHEMA = 'prueba' AND TABLE_NAME != 'bitacoraOrigen';";

        try {
            Statement statement = conexMariaDB.conexion.createStatement();
            ResultSet resultSet = statement.executeQuery(query);

            // Obtener los nombres de las tablas y agregarlos al modelo de la lista
            while (resultSet.next()) {
                String tableName = resultSet.getString("TABLE_NAME");
                listModel.addElement(tableName);
            }

            // Aplicar el modelo de la lista a la JList
            listaOrigen.setModel(listModel);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void listarTablasBDReplica(JList listaReplica){
        DefaultListModel<String> listModel = new DefaultListModel<>();

        // Consulta para obtener las tablas, excluyendo bitacoraOrigen
        String query = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME != 'bitacoraOrigen';";

        try {
            Statement statement = conexSQLServer.conexion.createStatement();
            ResultSet resultSet = statement.executeQuery(query);

            // Obtener los nombres de las tablas y agregarlos al modelo de la lista
            while (resultSet.next()) {
                String tableName = resultSet.getString("TABLE_NAME");
                listModel.addElement(tableName);
            }

            // Aplicar el modelo de la lista a la JList
            listaReplica.setModel(listModel);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }    
    private void deshabilitarElementosRepetidos(JList<String> listaOrigen, JList<String> listaReplica) {
        DefaultListModel<String> modelOrigen = (DefaultListModel<String>) listaOrigen.getModel();
        DefaultListModel<String> modelReplica = (DefaultListModel<String>) listaReplica.getModel();
        int sizeOrigen = modelOrigen.size();
        int sizeReplica = modelReplica.size();

        boolean[] enabledItems = new boolean[sizeOrigen > sizeReplica ? sizeOrigen : sizeReplica];

        // Recorre la lista de origen y deshabilita elementos que están en la lista de réplica
        for (int i = 0; i < sizeOrigen; i++) {
            String itemOrigen = modelOrigen.get(i);
            enabledItems[i] = !modelReplica.contains(itemOrigen);
        }

        // Si la lista de réplica tiene elementos adicionales, también los deshabilitamos
        if (sizeReplica > sizeOrigen) {
            for (int i = sizeOrigen; i < sizeReplica; i++) {
                enabledItems[i] = false;
            }
        }

        // Aplica el modelo personalizado a la lista de origen
        DisabledItemsListModel listModel = new DisabledItemsListModel();
        listModel.addAll(Collections.list(modelOrigen.elements())); // Agrega los elementos de la lista de origen
        listModel.setEnabledItems(enabledItems);
        listaOrigen.setModel(listModel);
    }
    private void obtenerQueries(ArrayList<String> queries){
        try {
            for (int i = 0; i < tablasAgregadas.size(); i++) {
                Statement originStmt = conexMariaDB.conexion.createStatement();
                String query = "SHOW CREATE TABLE " + tablasAgregadas.get(i) + ";";
                ResultSet rs = originStmt.executeQuery(query);
                while (rs.next()){
                    String createTableStatement = rs.getString(2);
                    System.out.println("Before \n" + createTableStatement);
                    String newCreateTableStatement = convertMariaDBToSQLServer(createTableStatement);
                    newCreateTableStatement = newCreateTableStatement + ";";
                    System.out.println("After \n" +newCreateTableStatement);
                    queries.add(newCreateTableStatement);
                }
                Statement insertStmt = conexMariaDB.conexion.createStatement();
                String query2 = "SELECT * FROM " + tablasAgregadas.get(i) + ";";
                ResultSet rs2 = insertStmt.executeQuery(query2);
                
                ResultSetMetaData rsmd = rs2.getMetaData();
                int cantColumnas = rsmd.getColumnCount();
                while (rs2.next()) {
                    // Crear el query de insert
                    String insertQuery = "INSERT INTO "+tablasAgregadas.get(i)+" VALUES (";
                    
                    // Agregar los valores de cada columna
                    for (int j = 1; j <= cantColumnas; j++) {
                        if (j > 1) { insertQuery += ","; }
                        // Obtener el tipo de dato
                        int columnType = rsmd.getColumnType(j);
                        // Si es un dato de tipo string le agrega comillas simples
                        if (columnType == Types.VARCHAR || columnType == Types.CHAR
                                || columnType == Types.NVARCHAR || columnType == Types.NCHAR) {
                            insertQuery += "'" + rs2.getString(j) + "'";
                        }
                        // Si es una fecha le pone formato de fecha
                        else if (columnType == Types.DATE) {
                            //insertQuery += "TO_DATE('"+rs2.getString(j)+"', 'YYYY-MM-DD')";
                            insertQuery += rs2.getDate(j);
                        }
                        else if (columnType == Types.DECIMAL){
                            insertQuery += rs2.getInt(j);
                        }
                    }
                    insertQuery += ");";

                    // Hacer el insert de la tupla en la BD destino
                    queries.add(insertQuery);

                }
            }
                
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
    }
    public static String convertMariaDBToSQLServer(String mariaDBSql) {
        
        boolean hasMatches = false;
        String sqlServerSql = mariaDBSql;
        do{
            sqlServerSql = mariaDBSql.replaceAll("int\\(\\d+\\)", "int");
            sqlServerSql = mariaDBSql.replaceAll("varchar\\(\\d+\\)", "varchar");
            sqlServerSql = mariaDBSql.replaceAll("AUTO_INCREMENT", "");

            sqlServerSql = sqlServerSql.replaceAll("ENGINE=InnoDB", "");

            //sqlServerSql = sqlServerSql.replaceAll("\\bKEY\\s+[^]+`\\s*\\([^)]*\\),", "");
            sqlServerSql = sqlServerSql.replaceAll("DEFAULT CHARSET=armscii8 COLLATE=armscii8_bin", "");

            
            
            sqlServerSql = sqlServerSql.replaceAll("`", "");


            sqlServerSql = sqlServerSql.replaceAll("CHARACTER SET [^ ]+ COLLATE [^ ]+", "");

            sqlServerSql = sqlServerSql.replaceAll("CONSTRAINT \\w+ FOREIGN KEY \\(([^)]+)\\) REFERENCES (\\w+) \\(([^)]+)\\) ON UPDATE CASCADE",
                                        "FOREIGN KEY ($1) REFERENCES $2 ($3) ON UPDATE CASCADE");
            
            

            
            
            if (!sqlServerSql.equals(mariaDBSql)) {
                hasMatches = true;
            }
            
        } while(hasMatches==false);
        
        return sqlServerSql;
    }
    private void obtenerDatosJob(){
        try {
            String sql = "SELECT TOP 1 J.name AS 'Nombre del Job', H.run_date AS 'Fecha de Ejecución', H.run_time AS 'Hora de Ejecución', H.run_duration AS 'Duración (en segundos)',\n" +
                    "    CASE H.run_status\n" +
                    "        WHEN 0 THEN 'Failed'\n" +
                    "        WHEN 1 THEN 'Succeeded'\n" +
                    "        WHEN 2 THEN 'Retry'\n" +
                    "        WHEN 3 THEN 'Canceled'\n" +
                    "        ELSE 'Unknown'\n" +
                    "    END AS 'Estado'\n" +
                    "FROM\n" +
                    "    msdb.dbo.sysjobs J INNER JOIN msdb.dbo.sysjobhistory H ON J.job_id = H.job_id\n" +
                    "WHERE\n" +
                    "    J.name = 'JobEscrituraQueries'\n" +
                    "ORDER BY\n" +
                    "    H.run_date DESC, H.run_time DESC;";

            Statement statement = conexSQLServer.conexion.createStatement();
            ResultSet resultado = statement.executeQuery(sql);

            // Procesar los resultados
            while (resultado.next()) {
                String fechaEjecucion = resultado.getString("Fecha de Ejecución");
                String horaEjecucion = resultado.getString("Hora de Ejecución");

                String fechaModificada = "";
                String horaModificada = "";
                for (int i = 0; i < fechaEjecucion.length(); i++) {
                    if(i==3 || i==5){
                        fechaModificada += fechaEjecucion.charAt(i) + "-";
                    }
                    else{
                        fechaModificada += fechaEjecucion.charAt(i);
                    }
                }
                for (int i = 0; i < horaEjecucion.length(); i++) {
                    if(i==1 || i==3){
                        horaModificada += horaEjecucion.charAt(i) + ":";
                    }
                    else{
                        horaModificada += horaEjecucion.charAt(i);
                    }
                }
                String newfechaModificada = "Ultima Fecha Que Se Llamo Job: " + fechaModificada;
                String newhoraModificada = "Ultima Hora Que Se LLamo Job: " + horaModificada;
                System.out.println(newfechaModificada);
                System.out.println(newhoraModificada);
                lbl_FechaEjecutada.setText(newfechaModificada);
                lbl_horaEjecucion.setText(newhoraModificada);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Loggin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Loggin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Loggin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Loggin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Loggin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Boton_Cancelar_Replicas;
    private javax.swing.JButton Boton_Guardar_Replicas;
    private javax.swing.JButton Boton_Guardar_db;
    private javax.swing.JButton Boton_Probar_Coneccion1;
    private javax.swing.JButton Boton_Probar_Coneccion2;
    private javax.swing.JLabel Flecha_Derecha;
    private javax.swing.JLabel Flecha_Izquierda;
    private javax.swing.JLabel Fondo4;
    private javax.swing.JLabel Fondo5;
    private javax.swing.JLabel Icono_Conectado;
    private javax.swing.JLabel Icono_replica;
    private javax.swing.JList<String> Lista_Tablas_Origen;
    private javax.swing.JList<String> Lista_Tablas_Replica;
    private javax.swing.JPanel Menu;
    private javax.swing.JTextField Nom_BaseDato_1;
    private javax.swing.JTextField Nom_BaseDato_2;
    private javax.swing.JTextField Nom_Insta_1;
    private javax.swing.JTextField Nom_Insta_2;
    private javax.swing.JTextField Nom_Pass_1;
    private javax.swing.JTextField Nom_Pass_2;
    private javax.swing.JTextField Nom_Puerto1;
    private javax.swing.JTextField Nom_Puerto2;
    private javax.swing.JTextField Nom_Usu1;
    private javax.swing.JTextField Nom_Usu2;
    private javax.swing.JPanel Panel_Conexiones;
    private javax.swing.JPanel Panel_Replica;
    private javax.swing.JButton btn_Job;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_FechaEjecutada;
    private javax.swing.JLabel lbl_horaEjecucion;
    // End of variables declaration//GEN-END:variables
}
